unit engineThread;

interface

uses Windows, Graphics, classes, math, dialogs, System.Generics.Collections;

type
TMap=array of array of TColor;
  TengineTh = class(TThread)
  private
    fColCount, fRowCount, fColorCount: integer;
    fPicture: TBitmap;
    threadNum: byte;
    fMap: TMap;
    FColCont: TList<TColor>;
    procedure GetMap;
    function Quantor(num, min, max, colorcount: integer):integer;
    //procedure SetPicture(const Value: TBitmap);
  public
    constructor create(Picture: TBitmap; ColCount, RowCount,
    colorCount: integer; thnum: byte);overload;
    destructor destroy;
    property Map: TMap read fMap;
    property ColorConteiner: TList<Tcolor> read FColCont;
  protected
    procedure Execute; override;
    {property ColCount:integer write fColCount;
    property RowCount: integer write fRowCount;
    property ColorCount: integer write fColorCount;
    property Picture: TBitmap write SetPicture;  }

  end;

implementation
uses Initunit;
{ TengineTh }

constructor TengineTh.create(Picture: TBitmap; ColCount, RowCount,
  colorCount: integer; thNum:byte);
begin
   inherited Create(false);
   fpicture:=Picture;
   fcolcount:=colcount;
   frowcount:=rowcount;
   fcolorCount:=colorCount;
   fcolCont:=TList<Tcolor>.Create;
   threadnum:=thNum;
end;

destructor TengineTh.destroy;
begin
  fColCont.Destroy;
end;

procedure TengineTh.Execute;
begin
  synchronize(getmap);
end;

procedure TengineTh.GetMap;
var AMap: TMap;
    i,j, u, v, sR, sG, sB, R, G, B, k,
    Rmax, Rmin, Gmax, Gmin, Bmax, Bmin:integer;
    WCoef, HCoef: word;
    MyRect:TBitmap;
    vRGB: longint;

procedure ColorSplit(c: Tcolor);
begin
  vRGB:=AMap[i,j];
       R:=GetRValue(vRGB);
       G:=GetGValue(vRGB);
       B:=GetBValue(vRGB);
end;
begin
  SetLength(AMap, fRowCount div 4,fColCount);
  WCoef:=FPicture.Width div fColCount;
  HCoef:=FPicture.Height div fRowCount;
  if ((Wcoef=0) or (hcoef=0)) then
  begin
    showmessage('Too small picture!');
    exit;
  end;
  k:=0;
  myRect:=TBitmap.Create(WCoef, HCoef);
  Rmax:=GetRValue(ColorToRGB(myRect.Canvas.Pixels[0,0]));
  Gmax:=GetGValue(ColorToRGB(myRect.Canvas.Pixels[0,0]));
  Bmax:=GetBValue(ColorToRGB(myRect.Canvas.Pixels[0,0]));
  Rmin:=Rmax; Gmin:=Gmax; Bmin:=Bmax;
  //===============
  initform.ProgrBar.Max:=frowCount*fcolCount;
  //===============
  for I := 0 to (fRowCount div 4)*threadnum-1 do
  for j := 0 to fColCount-1 do
    begin
       myRect.Canvas.CopyRect(Rect(0,0,myRect.Width,MyRect.Height),
                              FPicture.Canvas,
                              Rect(j*Wcoef,i*Hcoef,(j+1)*Wcoef,(i+1)*Hcoef  ));
       sR:=0; sG:=0; sB:=0;
       for u := 0 to myRect.Height-1 do
       for v := 0 to Myrect.Width-1 do
       begin
          vRGB:=ColorToRGB(MyRect.Canvas.Pixels[v,u]);
          inc(sR,GetRValue(vRGB));
          inc(sG,GetGValue(vRGB));
          inc(sB,GetBValue(vRGB));
       end;
       AMap[i,j]:=RGB(sr div (u*v), sg div (u*v), sb div (u*v));
       ColorSplit(AMap[i,j]);
       if R>Rmax then Rmax:=R;
       if R<Rmin then Rmin:=R;
       if G>Gmax then Gmax:=G;
       if G<Gmin then Gmin:=G;
       if B>Bmax then Bmax:=B;
       if B<Bmin then Bmin:=B;
       //================
       initform.ProgrBar.Position:=k;
       inc(k);
       //================
    end;
  for I := 0 to (fRowCount div 4)*threadnum-1 do
  for j := 0 to fColCount-1 do
  begin
    {ColorSplit(AMap[i,j]);
    AMap[i,j]:=RGB(Quantor(R, Rmin, rMax, fcolorcount),
                  Quantor(G, Gmin, GMax, fcolorcount),
                  Quantor(B, Bmin, BMax, fcolorcount));   }
    if not(FColcont.Contains(AMap[i,j])) then FColCont.Add(AMap[i,j]);

  end;
    fmap:=AMap;
    initform.ProgrBar.Position:=k;

end;

function TengineTh.Quantor(num, min, max, colorcount: integer): integer;
var koef:integer;   cut:byte;
begin
  koef:=(max-min) div colorcount;
  cut:=1;
  if koef>0 then
    cut:=floor((num-min)/koef);
  if cut=0 then cut:=1;
  result:=min+cut*koef-(koef div 2);
end;

end.
