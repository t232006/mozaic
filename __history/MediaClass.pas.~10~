unit MediaClass;

interface
uses  Graphics, winapi.Windows;
type
TMap = array of array of TColor;
Tcell = packed record
R,G,B,I,J: Byte;
end;
Tarr=array of Tcell;
TMediaSplit = class
  private
  Cubes: array of array of Tcell;
  Fmap: TMap;
  function preparation(AMap: TMap): Tarr;
  procedure splitCol(AColor: Tcolor; var c: Tcell);
  procedure SortCube(var Cube: Tarr);
  function MakeMiddle(miniCube: Tarr):TCell;
  procedure MakePallete(Cube: Tarr; deep: byte);
  public

  constructor create(Amap: TMap; deep: byte);
end;

implementation

constructor TMediaSplit.create(Amap: TMap; deep: byte);
var cu: TArr; k:integer;
begin
     Fmap:=Amap;
     k:=0;
     setlength(Cu, length(Amap)*length(Amap[0]));
     for var i := Low(Fmap) to High(Fmap) do
     for var j := Low(fMap[i]) to High(Fmap[i]) do
       begin
        Cu[k].R:=Fmap[i,j] and 255;
        Cu[k].G:=Fmap[i,j] shr 8 and 255;
        Cu[k].B:=Fmap[i,j] shr 16 and 255;
        Cu[k].I:=i;
        Cu[k].J:=j;
        inc(k);
       end;
     MakePallete(Cu, deep);

end;

procedure TMediaSplit.splitCol(AColor: Tcolor; var c: Tcell);
var vRGB: longint;
begin
  vRGB:=ColorToRGB(AColor);
  c.R:=vRGB and 255;
  c.G:=vRGB shr 8 and 255;
  c.B:=vRGB shr 16 and 255;
end;

function TMediaSplit.preparation(AMap: TMap): Tarr;
var i, j: word;
cell: Tcell;
begin
  setlength(result, i*j);
  for i:=0 to High(AMap) do
  for j:=0 to High(AMap[i]) do
  begin
    splitCol(AMap[i,j], cell);
    cell.i:=i; cell.j:=j;
    result[High(AMap)*i+j]:=cell;
                                               //splitCol(AMap[i,j],result[High(AMap)*i+j].R,)
  end;
end;

procedure TMediaSplit.SortCube(var Cube: Tarr);
var max, min: TCell;
procedure sortIns (offset:integer);
function getVal(v:TCell):byte;
var a:^byte;
begin
    a:=@v;
    inc(a, offset);
    result:=Pbyte(a)^;
end;
var i, j: word; key:TCell;
begin
    for j:= 2 to length(cube)-1 do
    begin

         key:=cube[j];
         i:=j-1;
         while ((i>=0) and (getVal(cube[j])>getVal(key))) do
         begin
             cube[i+1]:=cube[i];
             dec(i);
         end;
         cube[i+1]:=key
    end;
end;

begin
    max.R:=cube[0].R; max.B:=cube[0].B; max.G:=cube[0].G;
    min.R:=cube[0].R; min.B:=cube[0].B; min.G:=cube[0].G;
    for var i:=low(Cube) to High(Cube) do
    begin
       if max.R<Cube[i].R then max.R:=Cube[i].R;
       if max.G<Cube[i].G then max.G:=Cube[i].G;
       if max.B<Cube[i].B then max.B:=Cube[i].B;
       if min.B>Cube[i].B then min.B:=Cube[i].B;
       if min.G>Cube[i].G then min.G:=Cube[i].G;
       if min.R>Cube[i].R then min.R:=Cube[i].R;
    end;
    if (((max.R-min.R)>=(max.G-min.G)) and ((max.R-min.R)>=(max.B-min.B))) then sortIns(0) else
    if (((max.G-min.G)>=(max.R-min.R)) and ((max.G-min.G)>=(max.B-min.B))) then sortIns(1) else
    sortIns(2);

end;


function TMediaSplit.MakeMiddle(miniCube: TArr):TCell;
var sr,sg,sb: integer;  i:byte;
    mr:array[byte] of longint;
    mg:array[byte] of longint;
    mb:array[byte] of longint;
begin
    sr:=0; sg:=0; sb:=0;
    for i:=0 to 255 do
    begin
      mr[i]:=0; mg[i]:=0; mb[i]:=0;
    end;
    for i:=low(minicube) to high(minicube) do
    begin
       inc(mr[minicube[i].r]);
       inc(mr[minicube[i].g]);
       inc(mr[minicube[i].b]);
    end;
    for i:=low(minicube) to high(minicube) do
    begin
       sr:=sr+miniCube[i].r*mr[minicube[i].r];
       sg:=sg+miniCube[i].g*mr[minicube[i].g];
       sb:=sb+minicube[i].b*mr[minicube[i].b];
    end;
    result.r:=sr div mr[minicube[i].r];
    result.g:=sg div mr[minicube[i].g];
    result.b:=sb div mr[minicube[i].b];
end;

procedure TMediaSplit.MakePallete(Cube: tArr; deep: byte);
    var arr1, arr2: TArr;
    i:word;
    begin
       if deep>0 then
       begin
           if length(cube) mod 2 = 0 then
                           setlength(arr2, length(cube) div 2)
           else
                           setlength(arr2, (length(cube) div 2)+1);
           setlength(arr1, length(cube) div 2);
           sortCube(Cube);
           for i:=0 to High(cube) div 2 do
                           arr1[i]:=cube[i];
           for i:=i to high(cube) do
                           arr2[i]:=cube[i];
           MakePallete(arr1, deep-1);
           MakePallete(arr2, deep-1);
       end else
       begin
           for i:=0 to high(cube) do
           FMap[cube[i].i, cube[i].j]:=RGB(MakeMiddle(Cube).R, MakeMiddle(Cube).G, MakeMiddle(Cube).B);
       end;
    end;
{begin
  MakePallete(preparation(Map),6);
end;}
end.
