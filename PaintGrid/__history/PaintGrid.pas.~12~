unit PaintGrid;

interface

uses
  System.SysUtils, System.Classes, Vcl.Controls, Vcl.Grids, messages,
  graphics, types;

type
  TPaintGrid = class(TDrawGrid)
  private
    pressed: boolean;

    //AColCount: LongInt;
    FCurCol: TColor;
    FColWidth: Integer;
    FRowHeight: Integer;
    FOnChange: TNotifyEvent;
    procedure SizeChanged(OldColCount, OldRowCount: Longint); override;
    procedure SetDefaultColWidth(const Value: Integer);
    procedure SetDefaultRowHeight(const Value: Integer);

  protected

    procedure MouseDown(var Msg: TMessage); overload; message WM_LBUTTONDOWN;
    procedure MouseUp(var Msg: TMessage); overload; message WM_LBUTTONUP;
    procedure MouseMove(var Msg: TMessage); overload; message WM_MOUSEMOVE;
    //procedure Activate (var Msg: TMessage); overload; message WM_ACTIVATE;
  public
    //property ColorMap: array of array of TColor read FColorMap write FColorMap;
    ColorMap: array of array of TColor;
    property OnChange: TNotifyEvent read FOnChange write FOnChange;
    constructor Create(AOwner: TComponent); override;
    procedure DrawFromMap;
  published
    property currentColor: TColor read FCurCol write FCurCol;
    property DefaultColWidth: Integer read FColWidth write SetDefaultColWidth;
    property DefaultRowHeight: Integer read FRowHeight write SetDefaultRowHeight;
  end;

procedure Register;

implementation

procedure Register;
begin
  RegisterComponents('Samples', [TPaintGrid]);
end;

{ TPaintGrid }

constructor TPaintGrid.Create(AOwner: TComponent);

begin
  inherited;
  Setlength(ColorMap, ColCount, RowCount);

  DrawFromMap;
end;

procedure TPaintGrid.SetDefaultColWidth(const Value: Integer);
begin
  //inherited;
  FColWidth := Value;
  Width:=ColCount*(DefaultColWidth+1)+4;
  if assigned(FOnChange) then OnChange(self);

end;

procedure TPaintGrid.SetDefaultRowHeight(const Value: Integer);
begin
  //inherited;
  FRowHeight := Value;
  Height:=Rowcount*(DefaultRowHeight+1)+4;
  if assigned(FOnChange) then OnChange(self);

end;

procedure TPaintGrid.SizeChanged(OldColCount, OldRowCount: Longint);
begin
   Setlength(ColorMap, ColCount, RowCount);
   Width:=ColCount*(DefaultColWidth+1)+4;
   Height:=Rowcount*(DefaultRowHeight+1)+4;
end;

procedure TPaintGrid.DrawFromMap;
var i,j:longint;
begin
  for I := 0 to RowCount-1 do
  for j := 0 to ColCount-1 do
    begin
      Canvas.Brush.Color:=ColorMap[i,j];
      Canvas.Rectangle(CellRect(j, i) );
    end;
end;

procedure TPaintGrid.MouseDown(var Msg: TMessage);
begin
   pressed:=true;
end;

procedure TPaintGrid.MouseMove(var Msg: TMessage);
var a: TGridCoord;
begin
  if pressed then
  with canvas do
  begin
    brush.Color:=FcurCol;
    a:=MouseCoord((Msg.LParam) and $FFFF, (Msg.LParam shr 16) and $FFFF);
    Rectangle(CellRect(a.X, a.Y) );
    ColorMap[a.X,a.Y]:=currentColor;

  end;

end;

procedure TPaintGrid.MouseUp(var Msg: TMessage);
begin
   MouseMove(Msg);
   pressed:=false;
end;

end.

